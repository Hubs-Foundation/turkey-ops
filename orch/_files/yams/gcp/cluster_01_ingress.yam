apiVersion: v1
kind: Namespace
metadata:
  name: ingress
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-tcp-config
  namespace: ingress
data:
  5349:
    turkey-stream/coturn:5349
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: ingress
data:
  timeout-client: 30m
  timeout-client-fin: 1h
  timeout-server: 30m
  timeout-server-fin: 1h
  timeout-connect: 5s
  backend-config-snippet: |
    option forwardfor 
    acl no-backend nbsrv() lt 1 
    http-request redirect location "https://orch.{{.Domain}}/turkey-return-center/?goods=%[hdr(host)]" if no-backend
  ssl-redirect: "true"
  #access logging -- disabled for now in favor of GKE/LB loggings
  #syslog-server: 'address:stdout, format: raw, facility:daemon'
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: haproxy
  namespace: ingress
  labels:
    app: haproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
        name: haproxy
    spec:
      # hostNetwork: true
      serviceAccountName: haproxy
      terminationGracePeriodSeconds: 60
      {{ if ne .Env "dev" }}
      nodeSelector:
        turkey: service
      {{ end }}
      containers:
      - name: haproxy
        image: mozillareality/haproxy:1.7.0
        args:
        - --configmap=ingress/haproxy-config
        - --https-bind-port=4443
        - --http-bind-port=8080
        - --configmap-tcp-services=ingress/haproxy-tcp-config
        - --ingress.class=haproxy
        - --log=warning #error warning info debug trace
        - --default-ssl-certificate=ingress/letsencrypt
        securityContext:
          runAsUser:  1000
          runAsGroup: 1000
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        resources:
          requests:
            memory: 1Gi
            cpu: 0.5
          limits:
            memory: 2Gi
            cpu: 1
        livenessProbe:
          httpGet:
            path: /healthz
            port: 1042
        env:
        - name: TZ
          value: "Etc/UTC"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: letsencrypt ### required for haproxy -- but certbotbot will create this
#   namespace: ingress
# type: kubernetes.io/tls
# data:
#   tls.crt: |
#     ?????????????????????????????????????????????????
#   tls.key: |
#     ?????????????????????????????????????????????????
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: gke-lb-backendconfig
  namespace: ingress
spec:
  cdn:
    cachePolicy:
      includeHost: true
      includeProtocol: false
      includeQueryString: true
    enabled: true
  logging:
    enable: true
    sampleRate: 0.5
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/backend-config: '{"ports": {"443":"gke-lb-backendconfig"}}'
    cloud.google.com/neg: '{"ingress":true}'
  name: lb
  namespace: ingress
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  selector:
    app: haproxy
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 4443   
  - name: dialog
    port: 4443
    targetPort: 4443
  - name: turn
    port: 5349
    targetPort: 5349
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy-stats
  namespace: ingress
spec:
  selector:
    app: haproxy
  ports:
  - name: haproxy
    port: 1024
    targetPort: 1024
####################################################################################
################################### RBAC ###########################################
####################################################################################
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy
  namespace: ingress
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy
rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - nodes
    - pods
    - namespaces
    - events
    - serviceaccounts
    - services
    - endpoints    
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - "extensions"
    - "networking.k8s.io"
    resources:
    - ingresses
    - ingresses/status
    - ingressclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - "extensions"
    - "networking.k8s.io"
    resources:
    - ingresses/status
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
    - create
    - patch
    - update
  - apiGroups:
    - core.haproxy.org
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch
    - update
  - apiGroups:
    - "discovery.k8s.io"
    resources:
    - endpointslices
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch      
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy
subjects:
- kind: ServiceAccount
  name: haproxy
  namespace: ingress 
---
########################################################################
###################### certbotbot #########################################
########################################################################
apiVersion: v1
kind: Secret
metadata:
  name: configs
  namespace: ingress
stringData:
  AWS_KEY: {{.AWS_KEY}}
  AWS_SECRET: {{.AWS_SECRET}}
data:
  GCP_SA_KEY: {{.GCP_SA_KEY_b64}}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: certbotbot
  namespace: ingress
spec:
  schedule: "*/10 * * * *" # every 10 minutes initially, certbotbot will update this to a much longer interval after the initial run
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          restartPolicy: Never
          serviceAccountName: certbotbot
          {{ if ne .Env "dev" }}
          nodeSelector:
            turkey: service
          {{ end }}
          containers:
          - name: certbotbot
            image: mozillareality/certbotbot_route53:{{.ItaChan}}-latest
            imagePullPolicy: Always
            env:
            - name: DOMAIN
              value: {{.Domain}}
            - name: HUB_DOMAIN
              value: {{.HubDomain}}
            - name: CERTBOT_EMAIL
              value: gtan@mozilla.com
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: AWS_KEY      
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: AWS_SECRET
            - name: GCP_SA_KEY
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: GCP_SA_KEY
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: certbotbot
  namespace: ingress
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: certbotbot
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: certbotbot
  namespace: ingress 


