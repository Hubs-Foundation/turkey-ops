
terraform {  
    backend "gcs" {    
        bucket  = "turkeycfg"
        prefix  = "tf-backend/{{.Stackname}}"
    }
}
provider "google" {
  project = "{{.ProjectId}}"
  region  = "{{.Region}}"
}
provider "google-beta" {
  project = "{{.ProjectId}}"
  region  = "{{.Region}}"
}
variable "vmType" {
  type = map
  default = {
    "stream"  = "e2-standard-8"
    "hub" = "e2-standard-8"
    "service" = "e2-standard-16"
    "spot" = "e2-standard-8"
  }
}

variable "location" {
  type= string
  default   = "{{.Region}}-b"
}

################## network
# resource "google_compute_network" "vpc" {
#   provider = google-beta
#   auto_create_subnetworks         = false
#   delete_default_routes_on_create = false  
#   name                    = "{{.Stackname}}"
#   routing_mode            = "GLOBAL"
# }

resource "google_compute_subnetwork" "public" {
  provider = google-beta
  name    = "{{.Stackname}}-pub"
  region  = "{{.Region}}"
  network = "{{.HostVPC}}"
  ip_cidr_range = "10.1.0.0/16"
}
resource "google_compute_firewall" "stream" {
  provider = google-beta
  name     = "{{.Stackname}}-stream"
  network  = "{{.HostVPC}}"
  allow {
    protocol = "tcp"
    ports    = ["4443", "5349"]
  }
  allow {
    protocol = "udp"
    ports    = ["35000-65000"]
  }  
  source_ranges = ["0.0.0.0/0"]
}

################## GKE cluster
resource "google_container_cluster" "gke" {
  provider = google-beta
  name     = "{{.Stackname}}"
  location = var.location
  remove_default_node_pool = true
  initial_node_count       = 1
  networking_mode    = "CILIUM" # Enabling Dataplane V2 by setting networking mode to CILIUM
  network  = "{{.HostVPC}}"
  subnetwork = google_compute_subnetwork.public.name
  ip_allocation_policy {}  # empty == let gcp pick to avoid "cidr range not available" errors
  cluster_autoscaling {   # this is node auto-provisioning, not "cluster autoscaler", more info--https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-provisioning
    enabled = false
  }
  logging_config {
    enable_components = []
  }
  monitoring_config {
    enable_components = []
  } 
}

####################### node pools
####################### dev env => create a single "turkey:spot" node pool
####################### non-dev env => create 4 node pools: {turkey:stream, turkey:hub, turkey:services, turkey:spot}
resource "google_container_node_pool" "stream_nodes" {
  provider = google-beta
  name       = "${google_container_cluster.gke.name}-stream"
  location   = var.location
  cluster    = google_container_cluster.gke.name
  node_count = 1
  node_config {
    oauth_scopes = [
      "https://www.googleapis.com/auth/logging.write",
      "https://www.googleapis.com/auth/monitoring",
    ]
    labels = {
      env = "{{.Env}}"
      stackname="{{.Stackname}}"
      turkey = "stream"
    }
    preemptible  = false
    machine_type = var.vmType["stream"] # dialog's cpu bound, uses less than 1G ram per 1core cpu on load
    # local_ssd_count = 1
    tags         = ["turkey","{{.Env}}","stream","{{.Stackname}}"]
    metadata = {
      disable-legacy-endpoints = "true"
    }
  }
  autoscaling { # this is "cluster autoscaler"
    min_node_count = 1
    max_node_count = 32
  }
}
resource "google_container_node_pool" "hub_nodes" {
  provider = google-beta
  name       = "${google_container_cluster.gke.name}-hub"
  location   = var.location
  cluster    = google_container_cluster.gke.name
  node_count = 1
  node_config {
    oauth_scopes = [
      "https://www.googleapis.com/auth/logging.write",
      "https://www.googleapis.com/auth/monitoring",
    ]
    labels = {
      env = "{{.Env}}"
      stackname="{{.Stackname}}"
      turkey = "hub"
    }
    preemptible  = false
    machine_type = var.vmType["hub"]  # ret uses:
                                    #   10m/250Mi@idle, 150m+500Mi/ccu@25ccu, 380m/650Mi@60, 1300m/800Mi@110ccu
                                    #   aka. ram bound at low ccu, cpu bound at high ccu
    tags         = ["turkey","{{.Env}}","hub","{{.Stackname}}"]
    metadata = {
      disable-legacy-endpoints = "true"
    }
  }
  autoscaling { # this is "cluster autoscaler"
    min_node_count = 1
    max_node_count = 128
  }
}
resource "google_container_node_pool" "service_nodes" {
  provider = google-beta
  name       = "${google_container_cluster.gke.name}-service"
  location   = var.location
  cluster    = google_container_cluster.gke.name
  node_count = 1
  node_config {
    oauth_scopes = [
      "https://www.googleapis.com/auth/logging.write",
      "https://www.googleapis.com/auth/monitoring",
    ]
    labels = {
      env = "{{.Env}}"
      stackname="{{.Stackname}}"
      turkey = "service"
    }
    preemptible  = false
    machine_type = var.vmType["service"]
    # local_ssd_count = 1
    tags         = ["turkey","{{.Env}}","service","{{.Stackname}}"]
    metadata = {
      disable-legacy-endpoints = "true"
    }
  }
  autoscaling { # this is "cluster autoscaler"
    min_node_count = 1
    max_node_count = 32
  }
}

################## pgsql
resource "google_compute_global_address" "private_ip_address" {
  provider = google-beta
  name          = "{{.Stackname}}"
  purpose       = "VPC_PEERING"
  address_type  = "INTERNAL"
  prefix_length = 16
  network       = google_compute_network.vpc.id
}
resource "google_service_networking_connection" "private_vpc_connection" {
  depends_on = [
    google_compute_global_address.private_ip_address
  ]  
  provider = google-beta
  network                 = google_compute_network.vpc.id
  service                 = "servicenetworking.googleapis.com"
  reserved_peering_ranges = [google_compute_global_address.private_ip_address.name]
}
resource "google_sql_database_instance" "pgsql" {
  provider = google-beta
  depends_on = [google_service_networking_connection.private_vpc_connection]
  name             = "{{.Stackname}}"
  database_version = "POSTGRES_12"
  region           = "{{.Region}}"
  deletion_protection = false
  settings {
    {{ if ne .Env "dev" }}
    tier = "db-custom-4-26624"
    {{ else }}
    tier = "db-custom-2-13312"
    {{ end }}
    ip_configuration {
      ipv4_enabled    = true
      private_network = google_compute_network.vpc.id
    }
    database_flags {
      name = "max_connections"
      value = 2500
    }
  }
}
resource "google_sql_user" "db_user" {
  depends_on = [
    google_sql_database_instance.pgsql
  ]
  provider = google-beta
  name     = "{{.DbUser}}"
  instance = google_sql_database_instance.pgsql.name
  password = "{{.DbPass}}"
}
resource "google_sql_database" "dashboard_db" {
  depends_on = [
    google_sql_database_instance.pgsql
  ]  
  provider = google-beta
  name     = "dashboard"
  instance = google_sql_database_instance.pgsql.name
}

# ######################## filestore
# resource "google_filestore_instance" "instance" {
#   name = "{{.Stackname}}"
#   location = "{{.Region}}-b"
#   tier = "STANDARD"
#   file_shares {
#     capacity_gb = 1024
#     name        = "vol1"
#   }
#   networks {
#     network = "{{.Stackname}}"
#     modes   = ["MODE_IPV4"]
#   }
# }



