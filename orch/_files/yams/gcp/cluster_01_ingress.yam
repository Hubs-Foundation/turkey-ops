apiVersion: v1
kind: Namespace
metadata:
  name: ingress
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-tcp-config
  namespace: ingress
data:
  5349:
    turkey-stream/coturn:5349
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: ingress
data:
  backend-config-snippet: |
    option forwardfor
  ssl-redirect: "true"
  syslog-server: 'address:stdout, format: raw, facility:daemon'
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: haproxy
  namespace: ingress
  labels:
    k8s-app: haproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: haproxy
  template:
    metadata:
      labels:
        k8s-app: haproxy
        name: haproxy
    spec:
      # hostNetwork: true
      serviceAccountName: haproxy
      terminationGracePeriodSeconds: 60
      containers:
      - name: haproxy
        image: mozillareality/haproxy:1.7.0
        args:
        - --configmap=ingress/haproxy-config
        - --https-bind-port=4443
        - --http-bind-port=8080
        - --configmap-tcp-services=ingress/haproxy-tcp-config
        - --ingress.class=haproxy
        - --log=info #error warning info debug trace
        - --default-ssl-certificate=ingress/letsencrypt
        securityContext:
          runAsUser:  1000
          runAsGroup: 1000
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        resources:
          requests:
            memory: 200Mi
            cpu: 0.1
          limits:
            memory: 4Gi
            cpu: 2
        livenessProbe:
          httpGet:
            path: /healthz
            port: 1042
        env:
        - name: TZ
          value: "Etc/UTC"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: letsencrypt ### required -- but certbotbot will create this
#   namespace: ingress
# type: kubernetes.io/tls
# data:
#   tls.crt: |
#     LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCekNDQWUrZ0F3SUJBZ0lVRWtpQVNEcElaY1RFMWdMaFBYRHRJcGhCMmZFd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0VqRVFNQTRHQTFVRUF3d0hhR0Z3Y205NGVUQWdGdzB5TVRFd01Ea3lNRE15TVRkYUdBOHlNVEl4TURreApOVEl3TXpJeE4xb3dFakVRTUE0R0ExVUVBd3dIYUdGd2NtOTRlVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFECmdnRVBBRENDQVFvQ2dnRUJBTTFpSDg3VkYrTWpLdmZESW1MNHNvMkl0SFdhNExVV2ZQRUpmQlh5QTVyeHA3eXIKTmtrajd5czM4Uzdsbm9VdGFQdWs5ZkV3SGsvWklvdHQ1R2RkK0tqWVE4M25RaFJ5RHBIRmpFd3Y4UE5YMDFJbgpOOHhwbythU0ZsNEtld0Q4M2RMcGdFNDRFYnhyYitsOUI4TzF4eGF0ZzNVOXh6dk5yYmYyZytDcEsxKzM3RXVzCnZYWk9iZ2FBZllFMXhob2tBMWt4aURVdXN2azZYclExUHdManh6L1NyOGdKOXBSclVzWHo3ejRHcjNSMjA0bTEKMFdrdk1TeVRJQ3dWb2ltRmtnYW14ZDFlZXRORGhROTdweEFPNm9keE54Nlg1U2VXZmZrUVh1TVVpSldNd3dERApBdGdKYVZnU202ZFRSWmxJMnNqSjNuL0xON3ZpaW8rTFYvalkwd01DQXdFQUFhTlRNRkV3SFFZRFZSME9CQllFCkZNWVN5aUxCUHRCR2R4RkdscmtDWjFuWEdFOXJNQjhHQTFVZEl3UVlNQmFBRk1ZU3lpTEJQdEJHZHhGR2xya0MKWjFuWEdFOXJNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRkFZRmhxWApUT2xPZlFZaDUxVkNaWnA0LzM0aW1EakNkYTUxRlQvbUFHRUNpb0h1dnVuTFgzcVRuMVlVNEtheGhkRE5XVUl0CklIaTNIeFB3bmMxa3NvR3lnUkFSYTZsRHhnMDB0S3JXdzRvT0Y5U1V3dDBzTERaOE1JbDVCOEZRZTZyaklZcnoKNUZKK3Y4Y1BzS2dGajFncFAzV1V5WU1hRTQ4UnB6SncwTXU1Sy9meU4rQ2VhWE83SUtUUmw0RktwWUx0R2E2TQo0U1NMaWF6dXZjaUJwb05vTlhXRjBlWHJ5R1JQdDBsdyt1NWVpNkdpQi9OVGxLbHBZTlFaN1dyazdvTXNxWU56CjRMOTRVbTd5Z2dvdWJRbGRLNUdMT3I5UFFheGVYUVNuSXJVdEJNMUtrZVVqeTlFTXA2SThrZjA1UUcxOWxKNWkKZ1h2UnFjNHlFWEhpWDdFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
#   tls.key: |
#     LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRE5ZaC9PMVJmakl5cjMKd3lKaStMS05pTFIxbXVDMUZuenhDWHdWOGdPYThhZThxelpKSSs4ck4vRXU1WjZGTFdqN3BQWHhNQjVQMlNLTApiZVJuWGZpbzJFUE41MElVY2c2UnhZeE1ML0R6VjlOU0p6Zk1hYVBta2haZUNuc0EvTjNTNllCT09CRzhhMi9wCmZRZkR0Y2NXcllOMVBjYzd6YTIzOW9QZ3FTdGZ0K3hMckwxMlRtNEdnSDJCTmNZYUpBTlpNWWcxTHJMNU9sNjAKTlQ4QzQ4Yy8wcS9JQ2ZhVWExTEY4KzgrQnE5MGR0T0p0ZEZwTHpFc2t5QXNGYUlwaFpJR3BzWGRYbnJUUTRVUAplNmNRRHVxSGNUY2VsK1VubG4zNUVGN2pGSWlWak1NQXd3TFlDV2xZRXB1blUwV1pTTnJJeWQ1L3l6ZTc0b3FQCmkxZjQyTk1EQWdNQkFBRUNnZ0VBVVNLc2NpY1lrckIzN3Z6MWZxZkUwY2pwa1hRbnhTSW5KWW1iclllNENPUGkKWWRRNVU5ZVFTa0NGVlFOOUJodVVWNlVwUzZpNHNNNlVxUVEyc09jY3JvY1E4aXlqbkRRYXNWZWJQeFhKV0RpZgowTnFSWG4xMU5FY044d1NzNXd6K0RLNFY4OUNPb1NMSVNUTU5lREU5ZnlYNHdyNHZFTjhGKzZDMUpIRndJeFZ1CkJZS2JjUmhiT2FxL3QrSDFpcnlIbUFvRHAxYXZGUmVqNlZ6dzdUMTNBVUJaQ3pKdE85VGk5RzAyTHpqQWpxZ3YKeWpXekVXV2FkajZkdDRJazNTVkZmK095aTZGMThoNzZJYWhiN2xhQ0ZQZVgvYi9MWGZrZkVzRHRJTTYvSDF2RApmMDJPRlhJSCtZRUEvWEtWNkhTdGhXNEdJQVROcFBtb21qVFhxeDJjY1FLQmdRRDBuTmNlWjQ4WngwQUNjOEZTCmM2dmRWK3p4QXNZK0MyWlR3WTJFS0FDeEdOSGlFVGZUZTBmTldqejV3ZndNZW9DNi9qWkRraHJPYzFlV1pxcjQKUUxta2ZQK1NLNytqZVpSbUtHVWV3akpOSi9KMTFnMTZFcTlSWDBKWUUxWWZnN3ZaV01GRjUwNHptWmxwdnltNwpraEExcS9BOEI5eHZaZWx5Z25DS00rbFc5d0tCZ1FEVzhjVVpWZDBnMlYzR1pJMHRhejFVMlQ3SGpqbDhFZ0xjCnd0UVZwUTJRR296NUJ5MEY4aU9yN202bTQvbU5hQnNyNGNRZjMvamc3M0tZU1JZak05TkhOZFNwbitheEIxUHAKVXNOckIyQTRQbTdUYktkYithQ0xPdVpmTzRZckVpUzhEK1k4V05uRkFYd0pyWmNMalBETWtKQlphbVdVaG1RNQpmbU1SQWd6bFZRS0JnQkpBYWFTeElYSlE5YXU1SzJHVmsrdE9GalhkZVNGRUJIeVhZcEhMMGxGa2dyU1ZpRTdWClVnUTJpWG94U1RjOUpNSFBHZ2xzcTJkZ0g5YnZEaTY3MVo0NlhXOXdxRG53Wm14QTgxcWFMdHFtOG1ac2RGRDUKZCs5Z1pqamdLSHJ0ZjJTMlJLV01ucjhtNU5XSkYvb1E2ZmkzUFpPZEdvdU5WUi9nTDdtQUtoYjlBb0dBTE5GUwptSnJIdGM2ODk5NEZkZC96ZE5xcmRXNlpXOTVoakdodlVtZ004T3dvVXRDRk9jVW9YUFFsVEZVaXRySnJYL1grCkwrdENlSnhVMTUzOXFLOW9zV052Q1VOWEZiaUNiWmNkT2hiYW9EK2NXaWRBcWpQZG5zcFVPSzB2cDVGcjZXNmoKUWhnQXFFeEw4YlNwVnZZM1MyQWxTUStmU0ozUkRnL2xWaW1JU05VQ2dZRUExUWVhbmJ1STBpS2lKYkp1bm9uWgpPbEdiNjc0bDFtc2hQdFF4WTVqVTRHWndWR2hEeUk3bkFoSWIzNXRZdk84V25zalhqNjQ3Q203bThLWWMvRXRqCjhKd0c0cnlFWlNUZUtTTEx0SXJFOG5YZERVSGUvVEE0ZXlEVVZWWHk2RHV4RWx6d3hEc1BSencyZ3BSUHp6VHMKaFhBY3dDWitSNk1neUtVY1U2TXlBZEk9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
apiVersion: v1
kind: Service
metadata:
  name: lb
  namespace: ingress
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  selector:
    k8s-app: haproxy
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 4443   
  - name: dialog
    port: 4443
    targetPort: 4443
  - name: turn
    port: 5349
    targetPort: 5349
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy-stats
  namespace: ingress
spec:
  selector:
    k8s-app: haproxy
  ports:
  - name: haproxy
    port: 1024
    targetPort: 1024
####################################################################################
################################### RBAC ###########################################
####################################################################################
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy
  namespace: ingress
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy
rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - nodes
    - pods
    - namespaces
    - events
    - serviceaccounts
    - services
    - endpoints    
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - "extensions"
    - "networking.k8s.io"
    resources:
    - ingresses
    - ingresses/status
    - ingressclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - "extensions"
    - "networking.k8s.io"
    resources:
    - ingresses/status
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
    - create
    - patch
    - update
  - apiGroups:
    - core.haproxy.org
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch
    - update
  - apiGroups:
    - "discovery.k8s.io"
    resources:
    - endpointslices
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch      
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy
subjects:
- kind: ServiceAccount
  name: haproxy
  namespace: ingress 
---
########################################################################
###################### certbotbot #########################################
########################################################################
apiVersion: v1
kind: Secret
metadata:
  name: configs
  namespace: ingress
stringData:
  AWS_KEY: {{.AWS_KEY}}
  AWS_SECRET: {{.AWS_SECRET}}
  AWS_REGION: {{.AWS_REGION}}
  SMTP_SERVER: {{.SMTP_SERVER}}
  SMTP_PORT: "{{.SMTP_PORT}}"
  SMTP_USER: {{.SMTP_USER}}
  SMTP_PASS: {{.SMTP_PASS}}
data:
  GCP_SA_KEY: {{.GCP_SA_KEY_b64}}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: certbotbot
  namespace: ingress
spec:
  schedule: "*/10 * * * *" # every 10 minutes initially, certbotbot will update this to a much longer interval after a successful run
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: certbotbot
          containers:
          - name: certbotbot
            image: mozillareality/certbotbot_route53:stable-latest
            imagePullPolicy: Always
            env:
            - name: DOMAIN
              value: {{.Domain}}
            - name: CERTBOT_EMAIL
              value: gtan@mozilla.com
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: AWS_KEY      
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: AWS_SECRET   
            - name: GCP_SA_KEY
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: GCP_SA_KEY                                           
          restartPolicy: OnFailure
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: certbotbot
  namespace: ingress
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: certbotbot
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: certbotbot
  namespace: ingress 


