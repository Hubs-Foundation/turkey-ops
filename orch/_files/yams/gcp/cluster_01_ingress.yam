apiVersion: v1
kind: Namespace
metadata:
  name: ingress
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-tcp-config
  namespace: ingress
data:
  5349:
    turkey-stream/coturn:5349
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: ingress
data:
  global-config-snippet: |
    tune.bufsize 33792
  backend-config-snippet: |
    option forwardfor 
    option http-pretend-keepalive
    #acl no-backend nbsrv() lt 1 
    #http-request redirect location "https://orch.{{.Domain}}/turkey-return-center/?goods=%[hdr(host)]" if no-backend
  ssl-redirect: "true"
  timeout-client: 30m
  timeout-client-fin: 1h
  timeout-server: 30m
  timeout-server-fin: 1h
  timeout-connect: 3s
  #access logging -- can be enabled at runtime
  #syslog-server: 'address:stdout, format: raw, facility:daemon'
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: haproxy
  namespace: ingress
  labels:
    app: haproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
        name: haproxy
    spec:
      # hostNetwork: true
      serviceAccountName: haproxy-sa
      terminationGracePeriodSeconds: 60
      {{ if ne .Env "dev" }}
      nodeSelector:
        turkey: service
      {{ end }}
      containers:
      - name: haproxy
        image: haproxytech/kubernetes-ingress:1.8.5@sha256:09b59bc272e3aec5ca5b706774ed788c4bb4f184bb1d7ab99660a2b7773b0668
        args:
        - --configmap=ingress/haproxy-config
        - --https-bind-port=4443
        - --http-bind-port=8080
        - --configmap-tcp-services=ingress/haproxy-tcp-config
        - --ingress.class=haproxy
        - --log=warning #error warning info debug trace
        - --default-ssl-certificate=ingress/letsencrypt-route53
        securityContext:
          runAsUser:  1000
          runAsGroup: 1000
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        resources:
          requests:
            memory: 1Gi
            cpu: 0.5
          limits:
            memory: 2Gi
            cpu: 1
        livenessProbe:
          httpGet:
            path: /healthz
            port: 1042
            scheme: HTTP
          timeoutSeconds: 15
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 2
        readinessProbe:
          httpGet:
            path: /healthz
            port: 1042
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 1
          periodSeconds: 2
          successThreshold: 5
          failureThreshold: 5
        env:
        - name: TZ
          value: "Etc/UTC"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
---
apiVersion: v1
kind: Secret
metadata:
  name: letsencrypt-route53 # dummycert / place holder
  namespace: ingress
type: kubernetes.io/tls
data:
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkVENDQVIrZ0F3SUJBZ0lVUEJJQ2p5SWFrdElDNlJXZjBzemxqbEI3N0JNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0RqRU1NQW9HQTFVRUF3d0RjbVYwTUNBWERUSXpNRFl4TWpFMU5ETXhNMW9ZRHpJeE1qTXdOVEU1TVRVMApNekV6V2pBT01Rd3dDZ1lEVlFRRERBTnlaWFF3WERBTkJna3Foa2lHOXcwQkFRRUZBQU5MQURCSUFrRUF1M0orClJvZThkc2tFL0s0SFQ1SWlmZmdFZkNxc3g0bnE2MS9TUEFuV1hnd3kwbEJXSk9xUjBRdkVSK1ZOK3Vsak92V2gKVEkzSVVucEpuQ2pjM2VITDJ3SURBUUFCbzFNd1VUQWRCZ05WSFE0RUZnUVVJcFN2dlQvNDRlRnZSU1NSM0JmTwpZRWhIMkVnd0h3WURWUjBqQkJnd0ZvQVVJcFN2dlQvNDRlRnZSU1NSM0JmT1lFaEgyRWd3RHdZRFZSMFRBUUgvCkJBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU5CQUFwL1lWSUwwZEs4cEFRSllHcDRWWDdTU1Z5ZUcvYlQKdXduN2ZDbEVRbGQ2eElQanRTM244RVRycmEvM01Wck5xb0JDd0FhUlFhS1VWczRtYU5ldktCUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: |
    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUJWZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQVVBd2dnRThBZ0VBQWtFQXUzSitSb2U4ZHNrRS9LNEgKVDVJaWZmZ0VmQ3FzeDRucTYxL1NQQW5XWGd3eTBsQldKT3FSMFF2RVIrVk4rdWxqT3ZXaFRJM0lVbnBKbkNqYwozZUhMMndJREFRQUJBa0FXckMrWDZsMGlaUWdrWkF4Z1ZJVzFoT1ZOKzM5d2x6OEIvMUlYanYwTjNPaUZMc1BICjN1eXUvbVRUamNpdkpYa0dabitaQnJQN2JwVjB2RFdsaGQ4NUFpRUE5YkIzcEFFeUNVOEI3cXE0U0QwV0x4N3cKMzRIdS9NdnEyVWp6cWpHbVZpY0NJUUREVUU4dnJrWkovUE1TamtTdnpyNExoT1VUY3FQTTZQR21pWnBWSTgyQgpMUUloQUxMR25jZ3hObitmaGdCdEtYc25PQ1ZCbG5TTXo2SVRuK2hNTlVINnJ0YXhBaUVBaHNKSWdKdDcvOXk1ClVkbzdaaG45WWpGRlpRKzZHTTI0dmJFL2ZQTUEvZGtDSVFDc2drWHFPMzRwZnYyZTdRTDlpYXowNURmOFFyalEKUzZxMnlHWHljZUxBOWc9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: v1
kind: Secret
metadata:
  name: letsencrypt-http # dummycert / place holder
  namespace: ingress
type: kubernetes.io/tls
data:
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkVENDQVIrZ0F3SUJBZ0lVUEJJQ2p5SWFrdElDNlJXZjBzemxqbEI3N0JNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0RqRU1NQW9HQTFVRUF3d0RjbVYwTUNBWERUSXpNRFl4TWpFMU5ETXhNMW9ZRHpJeE1qTXdOVEU1TVRVMApNekV6V2pBT01Rd3dDZ1lEVlFRRERBTnlaWFF3WERBTkJna3Foa2lHOXcwQkFRRUZBQU5MQURCSUFrRUF1M0orClJvZThkc2tFL0s0SFQ1SWlmZmdFZkNxc3g0bnE2MS9TUEFuV1hnd3kwbEJXSk9xUjBRdkVSK1ZOK3Vsak92V2gKVEkzSVVucEpuQ2pjM2VITDJ3SURBUUFCbzFNd1VUQWRCZ05WSFE0RUZnUVVJcFN2dlQvNDRlRnZSU1NSM0JmTwpZRWhIMkVnd0h3WURWUjBqQkJnd0ZvQVVJcFN2dlQvNDRlRnZSU1NSM0JmT1lFaEgyRWd3RHdZRFZSMFRBUUgvCkJBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU5CQUFwL1lWSUwwZEs4cEFRSllHcDRWWDdTU1Z5ZUcvYlQKdXduN2ZDbEVRbGQ2eElQanRTM244RVRycmEvM01Wck5xb0JDd0FhUlFhS1VWczRtYU5ldktCUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: |
    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUJWZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQVVBd2dnRThBZ0VBQWtFQXUzSitSb2U4ZHNrRS9LNEgKVDVJaWZmZ0VmQ3FzeDRucTYxL1NQQW5XWGd3eTBsQldKT3FSMFF2RVIrVk4rdWxqT3ZXaFRJM0lVbnBKbkNqYwozZUhMMndJREFRQUJBa0FXckMrWDZsMGlaUWdrWkF4Z1ZJVzFoT1ZOKzM5d2x6OEIvMUlYanYwTjNPaUZMc1BICjN1eXUvbVRUamNpdkpYa0dabitaQnJQN2JwVjB2RFdsaGQ4NUFpRUE5YkIzcEFFeUNVOEI3cXE0U0QwV0x4N3cKMzRIdS9NdnEyVWp6cWpHbVZpY0NJUUREVUU4dnJrWkovUE1TamtTdnpyNExoT1VUY3FQTTZQR21pWnBWSTgyQgpMUUloQUxMR25jZ3hObitmaGdCdEtYc25PQ1ZCbG5TTXo2SVRuK2hNTlVINnJ0YXhBaUVBaHNKSWdKdDcvOXk1ClVkbzdaaG45WWpGRlpRKzZHTTI0dmJFL2ZQTUEvZGtDSVFDc2drWHFPMzRwZnYyZTdRTDlpYXowNURmOFFyalEKUzZxMnlHWHljZUxBOWc9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    # cloud.google.com/backend-config: '{"ports": {"443":"gke-lb-backendconfig"}}'
    cloud.google.com/neg: '{"ingress":true}'
  name: lb
  namespace: ingress
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  selector:
    app: haproxy
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 4443   
  - name: dialog
    port: 4443
    targetPort: 4443
  - name: turn
    port: 5349
    targetPort: 5349
  - name: healthcheck-for-gke-ingress
    port: 1042
    targetPort: 1042
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy-stats
  namespace: ingress
spec:
  selector:
    app: haproxy
  ports:
  - name: haproxy
    port: 1024
    targetPort: 1024
---
####################################################################################
################################### CDN ############################################
####################################################################################
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/backend-config: '{"ports": {"4443":"gcp-hosted-ingress"}}'
    cloud.google.com/app-protocols: '{"https":"HTTPS"}'
    cloud.google.com/neg: '{"ingress":false}'
  name: gke-ingress-haproxy
  namespace: ingress
spec:
  type: NodePort
  externalTrafficPolicy: Cluster
  selector:
    app: haproxy
  ports:
  # - name: http
  #   port: 80
  #   targetPort: 8080
  - name: https
    nodePort: 30000
    port: 4443    
  - name: healthz
    nodePort: 31042
    port: 1042
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: gcp-hosted-ingress
  namespace: ingress
spec:
  timeoutSec: 7200
  healthCheck:
    checkIntervalSec: 5
    timeoutSec: 3
    healthyThreshold: 2
    unhealthyThreshold: 2
    type: HTTP
    requestPath: /healthz
    port: 31042
  cdn:
    enabled: true
    cachePolicy:
      includeHost: true
      includeProtocol: false
      includeQueryString: true
---
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: gcp-hosted-ingress
  namespace: ingress
spec:
  redirectToHttps:
    enabled: true
    responseCodeName: PERMANENT_REDIRECT
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gcp-hosted-ingress
  namespace: ingress
  annotations:
    networking.gke.io/v1beta1.FrontendConfig: "gcp-hosted-ingress"
spec:
  tls:
  - secretName: letsencrypt-route53
  - secretName: letsencrypt-http
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: gke-ingress-haproxy
            port:
              number: 4443
####################################################################################
################################### RBAC ###########################################
####################################################################################
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-sa
  namespace: ingress
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy-cr
rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - nodes
    - pods
    - namespaces
    - events
    - serviceaccounts
    - services
    - endpoints    
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - "extensions"
    - "networking.k8s.io"
    resources:
    - ingresses
    - ingresses/status
    - ingressclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - "extensions"
    - "networking.k8s.io"
    resources:
    - ingresses/status
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
    - create
    - patch
    - update
  - apiGroups:
    - core.haproxy.org
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch
    - update
  - apiGroups:
    - "discovery.k8s.io"
    resources:
    - endpointslices
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch      
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy-cr
subjects:
- kind: ServiceAccount
  name: haproxy-sa
  namespace: ingress 
---
########################################################################
###################### certbotbot ######################################
########################################################################
apiVersion: v1
kind: Secret
metadata:
  name: configs
  namespace: ingress
stringData:
  AWS_KEY: {{.AWS_KEY}}
  AWS_SECRET: {{.AWS_SECRET}}
data:
  GCP_SA_KEY: {{.GCP_SA_KEY_b64}}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: certbotbot
  namespace: ingress
spec:
  schedule: "*/10 * * * *" # every 10 minutes initially, certbotbot will update this to a much longer interval after the initial run
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            app: certbotbot
        spec:
          restartPolicy: Never
          serviceAccountName: certbotbot
          {{ if ne .Env "dev" }}
          nodeSelector:
            turkey: service
          {{ end }}
          containers:
          - name: certbotbot
            image: mozillareality/certbotbot_route53:{{.ItaChan}}-latest
            imagePullPolicy: Always
            env:
            - name: DOMAIN
              value: {{.Domain}}
            - name: HUB_DOMAIN
              value: {{.HubDomain}}
            - name: CERTBOT_EMAIL
              value: gtan@mozilla.com
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: AWS_KEY      
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: AWS_SECRET
            - name: GCP_SA_KEY
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: GCP_SA_KEY
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: certbotbot
  namespace: ingress
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: certbotbot
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: certbotbot
  namespace: ingress 
# ---
# ########################################################################
# ########################### nginx ######################################
# ########################################################################
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   labels:
#     app.kubernetes.io/name: ingress-nginx
#   name: ingress-nginx-controller
#   namespace: ingress
# data:
#   allow-snippet-annotations: "true"
# ---  
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:        
#     app.kubernetes.io/name: ingress-nginx
#   name: ingress-nginx-controller
#   namespace: ingress
# spec:
#   minReadySeconds: 0
#   revisionHistoryLimit: 10
#   selector:
#     matchLabels:            
#       app.kubernetes.io/name: ingress-nginx
#   template:
#     metadata:
#       labels:              
#         app.kubernetes.io/name: ingress-nginx
#     spec:
#       containers:
#       - args:
#         - /nginx-ingress-controller
#         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
#         - --election-id=ingress-controller-leader
#         - --controller-class=k8s.io/ingress-nginx
#         - --ingress-class=nginx
#         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
#         env:
#         - name: POD_NAME
#           valueFrom:
#             fieldRef:
#               fieldPath: metadata.name
#         - name: POD_NAMESPACE
#           valueFrom:
#             fieldRef:
#               fieldPath: metadata.namespace
#         - name: LD_PRELOAD
#           value: /usr/local/lib/libmimalloc.so
#         image: registry.k8s.io/ingress-nginx/controller:v1.3.0@sha256:d1707ca76d3b044ab8a28277a2466a02100ee9f58a86af1535a3edf9323ea1b5
#         imagePullPolicy: IfNotPresent
#         name: nginx
#         # ports:
#         # - containerPort: 80
#         #   name: http
#         #   protocol: TCP
#         # - containerPort: 443
#         #   name: https
#         #   protocol: TCP
#         # - containerPort: 8443
#         #   name: webhook
#         #   protocol: TCP
#         lifecycle:
#           preStop:
#             exec:
#               command:
#               - /wait-shutdown
#         livenessProbe:
#           failureThreshold: 5
#           httpGet:
#             path: /healthz
#             port: 10254
#             scheme: HTTP
#           initialDelaySeconds: 10
#           periodSeconds: 10
#           successThreshold: 1
#           timeoutSeconds: 1
#         readinessProbe:
#           failureThreshold: 3
#           httpGet:
#             path: /healthz
#             port: 10254
#             scheme: HTTP
#           initialDelaySeconds: 10
#           periodSeconds: 10
#           successThreshold: 1
#           timeoutSeconds: 1
#         resources:
#           requests:
#             cpu: 100m
#             memory: 90Mi
#         securityContext:
#           allowPrivilegeEscalation: true
#           capabilities:
#             add:
#             - NET_BIND_SERVICE
#             drop:
#             - ALL
#           runAsUser: 101
#       nodeSelector:
#         turkey: service
#       serviceAccountName: ingress-nginx
#       terminationGracePeriodSeconds: 300
# ---
# apiVersion: networking.k8s.io/v1
# kind: IngressClass
# metadata:
#   labels:
#     app.kubernetes.io/name: ingress-nginx
#   name: nginx
# spec:
#   controller: k8s.io/ingress-nginx
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   labels:    
#     app.kubernetes.io/name: ingress-nginx
#   name: ingress-nginx-controller
#   namespace: ingress
# spec:
#   externalTrafficPolicy: Local
#   ports:
#   - appProtocol: http
#     name: http
#     port: 80
#     protocol: TCP
#     targetPort: http
#   - appProtocol: https
#     name: https
#     port: 443
#     protocol: TCP
#     targetPort: https
#   selector:
#     app.kubernetes.io/name: ingress-nginx
#   type: LoadBalancer
# ---
# apiVersion: v1
# automountServiceAccountToken: true
# kind: ServiceAccount
# metadata:
#   labels:
#     app.kubernetes.io/name: ingress-nginx
#   name: ingress-nginx
#   namespace: ingress
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   labels:
#     app.kubernetes.io/name: ingress-nginx
#   name: ingress-nginx
#   namespace: ingress
# rules:
# - apiGroups:
#   - ""
#   resources:
#   - namespaces
#   verbs:
#   - get
# - apiGroups:
#   - ""
#   resources:
#   - configmaps
#   - pods
#   - secrets
#   - endpoints
#   verbs:
#   - get
#   - list
#   - watch
# - apiGroups:
#   - ""
#   resources:
#   - services
#   verbs:
#   - get
#   - list
#   - watch
# - apiGroups:
#   - networking.k8s.io
#   resources:
#   - ingresses
#   verbs:
#   - get
#   - list
#   - watch
# - apiGroups:
#   - networking.k8s.io
#   resources:
#   - ingresses/status
#   verbs:
#   - update
# - apiGroups:
#   - networking.k8s.io
#   resources:
#   - ingressclasses
#   verbs:
#   - get
#   - list
#   - watch
# - apiGroups:
#   - ""
#   resourceNames:
#   - ingress-controller-leader
#   resources:
#   - configmaps
#   verbs:
#   - get
#   - update
# - apiGroups:
#   - ""
#   resources:
#   - configmaps
#   verbs:
#   - create
# - apiGroups:
#   - coordination.k8s.io
#   resourceNames:
#   - ingress-controller-leader
#   resources:
#   - leases
#   verbs:
#   - get
#   - update
# - apiGroups:
#   - coordination.k8s.io
#   resources:
#   - leases
#   verbs:
#   - create
# - apiGroups:
#   - ""
#   resources:
#   - events
#   verbs:
#   - create
#   - patch
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   labels:
#     app.kubernetes.io/name: ingress-nginx
#   name: ingress-nginx
# rules:
# - apiGroups:
#   - ""
#   resources:
#   - configmaps
#   - endpoints
#   - nodes
#   - pods
#   - secrets
#   - namespaces
#   verbs:
#   - list
#   - watch
# - apiGroups:
#   - coordination.k8s.io
#   resources:
#   - leases
#   verbs:
#   - list
#   - watch
# - apiGroups:
#   - ""
#   resources:
#   - nodes
#   verbs:
#   - get
# - apiGroups:
#   - ""
#   resources:
#   - services
#   verbs:
#   - get
#   - list
#   - watch
# - apiGroups:
#   - networking.k8s.io
#   resources:
#   - ingresses
#   verbs:
#   - get
#   - list
#   - watch
# - apiGroups:
#   - ""
#   resources:
#   - events
#   verbs:
#   - create
#   - patch
# - apiGroups:
#   - networking.k8s.io
#   resources:
#   - ingresses/status
#   verbs:
#   - update
# - apiGroups:
#   - networking.k8s.io
#   resources:
#   - ingressclasses
#   verbs:
#   - get
#   - list
#   - watch
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   labels:
#     app.kubernetes.io/name: ingress-nginx
#   name: ingress-nginx
#   namespace: ingress
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: ingress-nginx
# subjects:
# - kind: ServiceAccount
#   name: ingress-nginx
#   namespace: ingress
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   labels:
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/version: 1.3.0
#   name: ingress-nginx
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: ingress-nginx
# subjects:
# - kind: ServiceAccount
#   name: ingress-nginx
#   namespace: ingress
