# This is a basic workflow to help you get started with Actions

name: ret
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BIO_PKG_ORG: dummy1

    steps:
      - name: checkout-ret
        uses: actions/checkout@v2
        with:
          repository: mozilla/reticulum
          ref: feature/turkey
          path: '/ret'
      - name: docker
        run: |
          cd /ret
          cat > Dockerfile << 'EOL'
          FROM elixir:1.8-alpine as builder
          RUN apk add --no-cache nodejs yarn git build-base
          copy . .
          RUN mix local.hex --force && mix local.rebar --force && mix deps.get --only turkey
          run mix deps.clean mime --build && rm -rf _build && mix compile
          run MIX_ENV=turkey mix distillery.release
          run cp ./rel/config.toml ./_build/turkey/rel/ret/config.toml
          from alpine/openssl as certr
          workdir certs
          run openssl req -x509 -newkey rsa:2048 -sha256 -days 36500 -nodes -keyout key.pem -out cert.pem -subj '/CN=ret' && cp cert.pem cacert.pem
          FROM alpine
          workdir ret
          copy --from=builder /_build/turkey/rel/ret/ .
          copy --from=certr /certs .
          RUN apk update && apk add --no-cache bash openssl-dev openssl jq libstdc++
          run printf 'while true; do (echo -e "HTTP/1.1 200 OK\r\n") | nc -lp 1111 > /dev/null; done' > /healthcheck.sh && chmod +x /healthcheck.sh
          run printf ' \n\
          sed -i "s/{{POD_DNS}}/ret.${POD_NS}.svc.cluster.local/g" config.toml \n\
          prefix="turkeyCfg_"; for var in $(printenv); do var=$(echo $var | cut -d"=" -f1 ); [[ $var == $prefix* ]] && sed -i "s/{{${var#$prefix}}}/${!var}/g" config.toml; done \n\
          export HOME="/ret/var" LC_ALL="en_US.UTF-8 LANG=en_US.UTF-8" REPLACE_OS_VARS="true" \n\
          export MIX_ENV="turkey" RELEASE_CONFIG_DIR="/ret" RELEASE_MUTABLE_DIR="/ret/var" \n\
          export NODE_NAME="${POD_IP}" NODE_COOKIE="foobar" \n\
          echo "NODE_NAME=$NODE_NAME" \n\
          /healthcheck.sh& \n\
          exec /ret/bin/ret foreground ' > /run.sh
          cmd bash /run.sh
          EOL
          docker build -t ${{ secrets.DOCKER_HUB_USR }}/ret:$GITHUB_RUN_NUMBER .          
          echo ${{ secrets.DOCKER_HUB_PWD }} | sudo docker login --username ${{ secrets.DOCKER_HUB_USR }} --password-stdin             
          sudo docker images
          sudo docker push ${{ secrets.DOCKER_HUB_USR }}/ret:$GITHUB_RUN_NUMBER
  push-dev:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: dev
    steps:
      - name: pull <GITHUB_RUN_NUMBER>, re-tag to dev, push
        run: |
          echo ${{ secrets.DOCKER_HUB_PWD }} | sudo docker login --username ${{ secrets.DOCKER_HUB_USR }} --password-stdin             
          docker pull ${{ secrets.DOCKER_HUB_USR }}/ret:$GITHUB_RUN_NUMBER
          docker tag ${{ secrets.DOCKER_HUB_USR }}/ret:$GITHUB_RUN_NUMBER ${{ secrets.DOCKER_HUB_USR }}/ret:dev
          sudo docker push ${{ secrets.DOCKER_HUB_USR }}/ret:dev
  push-prod:
    runs-on: ubuntu-latest
    needs: push-dev
    environment:
      name: prod
    steps:
      - name: pull <GITHUB_RUN_NUMBER>, re-tag to prod, push
        run: |
          echo ${{ secrets.DOCKER_HUB_PWD }} | sudo docker login --username ${{ secrets.DOCKER_HUB_USR }} --password-stdin             
          docker pull ${{ secrets.DOCKER_HUB_USR }}/ret:$GITHUB_RUN_NUMBER
          docker tag ${{ secrets.DOCKER_HUB_USR }}/ret:$GITHUB_RUN_NUMBER ${{ secrets.DOCKER_HUB_USR }}/ret:prod
          sudo docker push ${{ secrets.DOCKER_HUB_USR }}/ret:prod
          


