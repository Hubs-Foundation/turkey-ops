name: hubs
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout-hubs
        uses: actions/checkout@v2
        with:
          repository: mozilla/hubs
          path: './hubs'
      - name: build rawhubs (unconfigured hubs and admin)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.turkeycfg_aws_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.turkeycfg_aws_key }}
          AWS_DEFAULT_REGION: us-east-1      
        run: |
          export BASE_ASSETS_PATH="{{rawhubs-base-assets-path}}"
          cd hubs && npm ci > /dev/null && npm run build > /dev/null
          cd admin && npm ci > /dev/null && npm run build > /dev/null && cp -R dist/* ../dist && cd ..
          mkdir -p dist/pages && mv dist/*.html dist/pages && mv dist/hub.service.js dist/pages && mv dist/schema.toml dist/pages
          
          echo "[info] rearrange files"
          mkdir rawhubs
          mv dist/pages rawhubs
          mv dist/assets rawhubs
          mv dist/react-components rawhubs/pages
          mv dist/favicon.ico rawhubs/pages          
          tree rawhubs
          
          #aws s3 rm --recursive s3://turkeycfg/rawhubs > /dev/null
          #aws s3 sync ./rawhubs s3://turkeycfg/rawhubs > /dev/null
      
      - name: wrap in nginx container
        run: |
          cd ./hubs/rawhubs/
          cat > Dockerfile << EOL
          from alpine/openssl as builder
          run mkdir /ssl && openssl req -x509 -newkey rsa:2048 -sha256 -days 36500 -nodes -keyout /ssl/key -out /ssl/cert -subj '/CN=hubs'
          from nginx:alpine
          run mkdir /ssl && mkdir -p /www/hubs && mkdir -p /www/hubs/pages && mkdir -p /www/hubs/assets
          copy --from=builder /ssl /ssl
          copy ./pages /www/hubs/pages
          copy ./assets /www/hubs/assets
          run echo "server {listen 8080 ssl;ssl_certificate /ssl/cert;ssl_certificate_key /ssl/key; location / {root /www;autoindex off;}}" > /etc/nginx/conf.d/default.conf
          run printf 'while true; do (echo -e "HTTP/1.1 200 OK\r\n") | nc -lp 1111 > /dev/null; done' > /healthcheck.sh && chmod +x /healthcheck.sh
          run printf ' \n\  
            find /www/hubs/ -type f -name *.html -exec sed -i "s/{{rawhubs-base-assets-path}}/https:\/\/${SUB_DOMAIN}.${DOMAIN}\/hubs/g" {} \; \n\
            find /www/hubs/ -type f -name *.css -exec sed -i "s/{{rawhubs-base-assets-path}}/https:\/\/${SUB_DOMAIN}.${DOMAIN}\/hubs/g" {} \; \n\
            
            /healthcheck.sh& \n\
            nginx -g "daemon off;" \n\n' > /run.sh
          run chmod +x /run.sh && cat /run.sh
          entrypoint /run.sh
          EOL
          docker build -t ${{ secrets.DOCKER_HUB_USR }}/hubs:dev .
          echo ${{ secrets.DOCKER_HUB_PWD }} | sudo docker login --username ${{ secrets.DOCKER_HUB_USR }} --password-stdin
          sudo docker push ${{ secrets.DOCKER_HUB_USR }}/hubs:dev
          
