
apiVersion: v1
kind: Namespace
metadata:
  name: turkey-services
---
########################################################################
###################### configs #########################################
########################################################################  
apiVersion: v1
kind: Secret
metadata:
  name: configs
  namespace: turkey-services
stringData:
  DB_USER: postgres
  OAUTH_CLIENT_ID_GOOGLE: secret
  OAUTH_CLIENT_SECRET_GOOGLE: secret
  OAUTH_CLIENT_ID_FXA: {{.OAUTH_CLIENT_ID_FXA}}
  OAUTH_CLIENT_SECRET_FXA: {{.OAUTH_CLIENT_SECRET_FXA}}    
  COOKIE_SECRET: {{.COOKIE_SECRET}}
  DB_CONN: {{.DB_CONN}}
  AWS_KEY: {{.AWS_KEY}}
  AWS_SECRET: {{.AWS_SECRET}}
  AWS_REGION: {{.AWS_REGION}}
  PERMS_KEY: {{.PERMS_KEY}}
  DB_PASS: {{.DB_PASS}}
  DB_HOST: {{.DB_HOST}}
  SMTP_SERVER: {{.SMTP_SERVER}}
  SMTP_PORT: "{{.SMTP_PORT}}"
  SMTP_USER: {{.SMTP_USER}}
  SMTP_PASS: {{.SMTP_PASS}}
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: hc-launch-fallback
  namespace: turkey-services
spec:
  errors:
    status:
      - "502"
      - "503"
    query: /hc_launch_fallback
    service:
      name: turkey-api
      port: 888
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: global-404-fallback
  namespace: turkey-services
spec:
  errors:
    status:
      - "404"
    query: /global_404_fallback
    service:
      name: turkey-api
      port: 888
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: ret-cors
  namespace: turkey-services
spec:
  headers:
    customResponseHeaders:
      Access-Control-Allow-Origin: "*"
---
####################################################################################
####################################### auth #######################################
####################################################################################  
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: turkey-auth
  namespace: turkey-services
spec:
  entryPoints:
    - https
  routes:
  - kind: Rule
    match: Host(`auth.{{.Domain}}`) && PathPrefix(`/`)
    # middlewares:
    # - name: turkeyauth
    #   namespace: turkey-services
    services:
    - kind: Service
      name: auth
      passHostHeader: true
      port: 9001
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: turkeyauth
  namespace: turkey-services
spec:
  forwardAuth:
    address: http://auth.turkey-services:9001/authn
    trustForwardHeader: true        
    authResponseHeadersRegex: ^X-Forwarded-
    # authResponseHeaders:
    #   - X-Forwarded-User
    #   - X-Forwarded-UserEmail
    #   - X-Forwarded-UserPicture
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
  namespace: turkey-services
  labels:
    app: auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: auth
    spec:
      # terminationGracePeriodSeconds: 3
      containers:
      - name: turkeyauth
        image: mozillareality/turkeyauth:86
        imagePullPolicy: IfNotPresent        
        env:
        - name: trustedClients  # must end with ','
          value: https://api.{{.Domain}}/console,http://localhost:3030,
        - name: COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: configs
              key: COOKIE_SECRET
        # - name: trusted_IPs
        #   value: 73.53.171.231,107.137.66.24
        - name: oauthClientId_google
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_ID_GOOGLE          
        - name: oauthClientSecret_google
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_SECRET_GOOGLE          
        - name: oauthClientId_fxa
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_ID_FXA
        - name: oauthClientSecret_fxa
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_SECRET_FXA
        resources:
          requests:
            memory: 200Mi
            cpu: 0.1        
          limits:
            memory: 2Gi
            cpu: 1

---
apiVersion: v1
kind: Service
metadata:
  name: auth
  namespace: turkey-services
  labels:
    app: auth
spec:
  type: ClusterIP
  selector:
    app: auth
  ports:
  - name: http
    port: 9001
    targetPort: 9001
---
####################################################################################
######################################### api ######################################
####################################################################################
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: turkey-api
  namespace: turkey-services
spec:
  entryPoints:
    - https
  routes:  
  - kind: Rule
    match: Host(`api.{{.Domain}}`) && PathPrefix(`/`)
    middlewares:
    - name: turkeyauth
      namespace: turkey-services
    services:
    - kind: Service
      name: turkey-api
      passHostHeader: true
      port: 888
  - kind: Rule
    match: Host(`api.{{.Domain}}`) && PathPrefix(`/webhooks/`)
    services:
    - kind: Service
      name: turkey-api
      passHostHeader: true
      port: 888
---
apiVersion: v1
kind: Secret
metadata:
  name: regcred
  namespace: turkey-services
data:
  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOiB7CgkJCSJhdXRoIjogImJXOTZhV3hzWVhKbFlXeHBkSGs2Y21Wd2IzSjBJR0psWjJGMElIWmxjM1J0Wlc1MElHRnNkbVZ2YkdGeUlHTnNiM1JvIgoJCX0KCX0KfQ==
type: kubernetes.io/dockerconfigjson
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: hubsbuilds
#   namespace: turkey-services
#   labels:
#     foo: bar
# data:
#   foo: bar
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: turkey-api
  namespace: turkey-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: turkey-api
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: turkey-api
    spec:
      serviceAccountName: api-sa
      containers:
      - name: turkey-orc
        image: mozillareality/turkeyapi:200
        imagePullPolicy: IfNotPresent        
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NS
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_LABEL_APP
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        - name: DOMAIN
          value: {{.Domain}}
        - name: DB_CONN
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_CONN
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_USER               
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_PASS
        - name: SMTP_SERVER
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_SERVER
        - name: SMTP_PORT
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_PORT
        - name: SMTP_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_USER
        - name: SMTP_PASS
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_PASS                        
        - name: AWS_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: AWS_KEY           
        - name: AWS_SECRET
          valueFrom:
            secretKeyRef:
              name: configs
              key: AWS_SECRET           
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: configs
              key: AWS_REGION           
        - name: PERMS_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: PERMS_KEY     
        - name: OAUTH_CLIENT_ID_FXA
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_ID_FXA
        - name: OAUTH_CLIENT_SECRET_FXA
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_SECRET_FXA                    
        livenessProbe:
          httpGet:
            path: "http://turkey-api.turkey-services/Healthz"
            port: 888
          initialDelaySeconds: 20
          timeoutSeconds: 1
          periodSeconds: 120
        resources:
          requests:
            memory: 200Mi
            cpu: 0.1        
          limits:
            memory: 2Gi
            cpu: 1
      imagePullSecrets:
      - name: regcred      
---
apiVersion: v1
kind: Service
metadata:
  name: turkey-api
  namespace: turkey-services
spec:
  ports:
  - name: http
    port: 888
    targetPort: 888
  selector:
    app: turkey-api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-sa
  namespace: turkey-services
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: api-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin  
subjects:
- kind: ServiceAccount
  name: api-sa
  namespace: turkey-services
---
####################################################################################
################################### pgbouncer ######################################
####################################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: turkey-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgbouncer
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      containers:
      - image: mozillareality/pgbouncer:6
        imagePullPolicy: IfNotPresent
        name: pgbouncer
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_USER          
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_PASS
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_HOST          
        resources:
          requests:
            memory: 200Mi
            cpu: 0.1         
          limits:
            memory: 2Gi
            cpu: 1            
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
  namespace: turkey-services
spec:
  ports:
  - name: http
    port: 5432
    targetPort: 5432
  selector:
    app: pgbouncer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer-t
  namespace: turkey-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgbouncer-t
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: pgbouncer-t
    spec:
      containers:
      - image: mozillareality/pgbouncer:6
        imagePullPolicy: IfNotPresent
        name: pgbouncer-t
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_USER          
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_PASS
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_HOST   
        - name: POOL_MODE
          value: transaction
        resources:
          requests:
            memory: 200Mi
            cpu: 0.1        
          limits:
            memory: 2Gi
            cpu: 1                       
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer-t
  namespace: turkey-services
spec:
  ports:
  - name: http
    port: 5432
    targetPort: 5432
  selector:
    app: pgbouncer-t
---
########################################################################
######################   ita   ###################################
########################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ita
  namespace: turkey-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ita
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: ita
    spec:
      serviceAccountName: ita-sa
      containers:
      - image: mozillareality/ita:0
        imagePullPolicy: Always
        name: ita
        env:
        - name: POD_NS
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_DEPLOYMENT_NAME
          value: ita
        - name: CHANNEL
          value: stable
        resources:
          requests:
            memory: 50Mi
            cpu: 0.05
          limits:
            memory: 200Mi
            cpu: 0.2
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ita-sa
  namespace: turkey-services
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ita-sa-rb
  namespace: turkey-services
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit #todo: further tighten this?
subjects:
- kind: ServiceAccount
  name: ita-sa
  namespace: turkey-services
---
###############################################################################
### grant all service accounts read access to configmaps in turkey-services ###
###############################################################################
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hubsbuilds-reader
  namespace: turkey-services
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs:
    - "get"
    - "watch"
    - "list"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hubsbuilds-reader-rb
  namespace: turkey-services
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hubsbuilds-reader
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts
---
###############################################################################
### s3fs ###
###############################################################################
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: s3fs
  namespace: turkey-services
spec:
  selector:
    matchLabels:
      app: s3fs
  template:
    metadata:
      labels:
        app: s3fs
    spec:
      containers:
      - name: s3fs
        image: mozillareality/s3fs:0
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","umount -f /var/s3"]
        securityContext:
          privileged: true
          capabilities:
            add:
            - SYS_ADMIN
        env:
        - name: AWS_KEY
          value: AKIAYEJRSWRAQSAMLSGX
        - name: AWS_SECRET
          value: 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
        - name: S3_BUCKET
          value: turkeyfs-use1
        - name: MNT_DIR
          value: /var/s3fs
        volumeMounts:
        - name: devfuse
          mountPath: /dev/fuse
        - name: s3fsdata
          mountPath: /var/s3fs:shared
      volumes:
      - name: devfuse
        hostPath:
          path: /dev/fuse
      - name: s3fsdata
        hostPath:
          path: /home/s3fs



