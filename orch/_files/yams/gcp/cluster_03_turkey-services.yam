###turkey-services

apiVersion: v1
kind: Namespace
metadata:
  name: turkey-services
# ---
# ########################################################################
# ###################### turkeyfs #########################################
# ######################################################################## 
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: turkeyfs-pvc
#   namespace: turkey-services
# spec:
#   accessModes:
#     - ReadWriteMany
#   storageClassName: gke-filestore
#   resources:
#     requests:
#       storage: 1Ti
# ---
# kind: Deployment
# apiVersion: apps/v1
# metadata:
#   name: turkeyfs
#   namespace: turkey-services
#   annotations:
#     cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: turkeyfs
#   template:
#     metadata:
#       labels:
#         app: turkeyfs
#     spec:
#       {{ if ne .Env "dev" }}
#       nodeSelector:
#         turkey: service
#       {{ end }}
#       containers:
#       - name: turkeyfs
#         image: k8s.gcr.io/volume-nfs:0.8
#         imagePullPolicy: IfNotPresent       
#         resources:
#           requests:
#             memory: 2000Mi
#             cpu: 1
#           limits:
#             memory: 4000Mi
#             cpu: 2
#         securityContext:
#           privileged: true
#         volumeMounts:
#         - name: turkeyfs
#           mountPath: /exports
#       volumes:
#         - name: turkeyfs
#           persistentVolumeClaim:
#             claimName: turkeyfs-pvc
# ---
# kind: Service
# apiVersion: v1
# metadata:
#   name: turkeyfs
#   namespace: turkey-services
# spec:
#   selector:
#     app: turkeyfs
#   ports:    # Open the ports required by the NFS server
#     # Port 2049 for TCP
#     - port: 2049
#       protocol: TCP
---
########################################################################
###################### configs #########################################
########################################################################  
apiVersion: v1
kind: Secret
metadata:
  name: configs
  namespace: turkey-services
stringData:  
  DB_USER: postgres
  OAUTH_CLIENT_ID_GOOGLE: secret
  OAUTH_CLIENT_SECRET_GOOGLE: secret
  OAUTH_CLIENT_ID_FXA: {{.OAUTH_CLIENT_ID_FXA}}
  OAUTH_CLIENT_SECRET_FXA: {{.OAUTH_CLIENT_SECRET_FXA}}    
  COOKIE_SECRET: {{.COOKIE_SECRET}}
  DB_CONN: {{.DB_CONN}}
  PERMS_KEY: {{.PERMS_KEY}}
  DB_PASS: {{.DB_PASS}}
  DB_HOST: {{.DB_HOST}}
  SMTP_SERVER: {{.SMTP_SERVER}}
  SMTP_PORT: "{{.SMTP_PORT}}"
  SMTP_USER: {{.SMTP_USER}}
  SMTP_PASS: {{.SMTP_PASS}}
  DASHBOARD_DATABASE_URL: ecto://postgres:{{.DB_PASS}}@{{.DB_HOST}}/dashboard
  DASHBOARD_SECRET_KEY_BASE: {{.COOKIE_SECRET}}
  AWS_KEY: {{.AWS_KEY}}
  AWS_SECRET: {{.AWS_SECRET}}
  GCP_SA_HMAC_KEY: {{.GCP_SA_HMAC_KEY}}
  GCP_SA_HMAC_SECRET: {{.GCP_SA_HMAC_SECRET}}  
  DASHBOARD_ACCESS_KEY: {{.DASHBOARD_ACCESS_KEY}}
  SKETCHFAB_API_KEY: {{.SKETCHFAB_API_KEY}}
  TENOR_API_KEY: {{.TENOR_API_KEY}}
  SENTRY_DSN_RET: {{.SENTRY_DSN_RET}}
  SENTRY_DSN_HUBS: {{.SENTRY_DSN_HUBS}}
  SENTRY_DSN_SPOKE: {{.SENTRY_DSN_SPOKE}}
data:
  AUTH_PUBLIC_KEY: {{.PERMS_KEY_PUB_b64}}
  GCP_SA_KEY: {{.GCP_SA_KEY_b64}}
---
####################################################################################
######################### turkeyauthproxy ingress ##################################
####################################################################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-private
  namespace: turkey-services
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.org/server-ssl: "true"
    haproxy.org/request-set-header: |
      backend http://grafana.monitoring:3000/
      AllowedEmailDomains mozilla.com,
    haproxy.org/path-rewrite: (.*) /turkeyauthproxy\1   #add /turkeyauthproxy prefix
spec:
  rules:
  - host: grafana.{{.Domain}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.org/server-ssl: "true"
    haproxy.org/request-set-header: |
      backend http://skooner.tools:80/
      AllowedEmailDomains mozilla.com,
    haproxy.org/path-rewrite: (.*) /turkeyauthproxy\1   #add /turkeyauthproxy prefix
  generation: 1
  name: skooner
  namespace: turkey-services
spec:
  rules:
  - host: dash.{{.Domain}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.org/server-ssl: "true"
    haproxy.org/request-set-header: |
      backend https://turkeyorch:889/
      AllowedEmailDomains mozilla.com,
    haproxy.org/path-rewrite: (.*) /turkeyauthproxy\1   #add /turkeyauthproxy prefix
  generation: 1
  name: turkeyorch-private
  namespace: turkey-services
spec:
  rules:
  - host: orch.{{.Domain}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.org/server-ssl: "true"
    haproxy.org/request-set-header: |
      backend http://haproxy-stats.ingress:1024/
      AllowedEmailDomains mozilla.com,
    haproxy.org/path-rewrite: (.*) /turkeyauthproxy\1   #add /turkeyauthproxy prefix
  generation: 1
  name: haproxy-stats
  namespace: turkey-services
spec:
  rules:
  - host: haproxy.{{.Domain}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.org/server-ssl: "true"
    haproxy.org/request-set-header: |
      backend http://alertmanager.monitoring:9093/
      AllowedEmailDomains mozilla.com,
    haproxy.org/path-rewrite: (.*) /turkeyauthproxy\1   #add /turkeyauthproxy prefix
  generation: 1
  name: alertmanager
  namespace: turkey-services
spec:
  rules:
  - host: alertmanager.{{.Domain}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.org/server-ssl: "true"
    haproxy.org/request-set-header: |
      backend http://prometheus.monitoring:9090/
      AllowedEmailDomains mozilla.com,
    haproxy.org/path-rewrite: (.*) /turkeyauthproxy\1   #add /turkeyauthproxy prefix
  generation: 1
  name: prometheus
  namespace: turkey-services
spec:
  rules:
  - host: prometheus.{{.Domain}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
---
####################################################################################
####################################### auth #######################################
####################################################################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: turkeyauth
  namespace: turkey-services
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.org/server-ssl: "true"
spec:
  rules:
  - host: auth.{{.Domain}}
    http:
      paths:
      - path: /login
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
      - path: /_oauth
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
      - path: /_fxa
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
      - path: /logout
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
      - path: /authn
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
      - path: /chk_cookie
        pathType: Prefix
        backend:
          service:
            name: turkeyauth
            port: 
              number: 9002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: turkeyauth
  namespace: turkey-services
  labels:
    app: turkeyauth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: turkeyauth
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: turkeyauth
    spec:
      # terminationGracePeriodSeconds: 3
      {{ if ne .Env "dev" }}
      nodeSelector:
        turkey: service
      {{ end }}
      containers:
      - name: turkeyauth
        image: mozillareality/turkeyauth:{{.ItaChan}}-latest
        imagePullPolicy: IfNotPresent        
        env:
        - name: ENV
          value: {{.Env}}
        - name: AuthHost
          value: auth.{{.Domain}}
        - name: turkeyDomain
          value: {{.Domain}}
        - name: trustedClients  # must end with ','
          value: https://orch.{{.Domain}}/console,https://dashboard.{{.Domain}},https://{{.Domain}},
        - name: PERMS_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: PERMS_KEY         
        - name: COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: configs
              key: COOKIE_SECRET
        # - name: trusted_IPs
        #   value: 73.53.171.231,107.137.66.24
        - name: oauthClientId_google
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_ID_GOOGLE          
        - name: oauthClientSecret_google
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_SECRET_GOOGLE          
        - name: oauthClientId_fxa
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_ID_FXA
        - name: oauthClientSecret_fxa
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_SECRET_FXA
        - name: AUTH_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: AUTH_PUBLIC_KEY
        livenessProbe:
          httpGet:
            path: "/_healthz"
            port: 9002
            scheme: HTTPS
          initialDelaySeconds: 30
          timeoutSeconds: 1
          periodSeconds: 60            
        resources:
          requests:
            cpu: 1
            memory: 1Gi
          limits:
            cpu: 2
            memory: 3Gi

---
apiVersion: v1
kind: Service
metadata:
  name: turkeyauth
  namespace: turkey-services
  labels:
    app: turkeyauth
spec:
  type: ClusterIP
  selector:
    app: turkeyauth
  ports:
  - name: http
    port: 9001
    targetPort: 9001
  - name: https
    port: 9002
    targetPort: 9002
---
####################################################################################
######################################### orch #####################################
####################################################################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: turkeyorch-public
  namespace: turkey-services
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.org/server-ssl: "true"
spec:
  rules:
  - host: orch.{{.Domain}}
    http:
      paths:
      - path: /webhooks
        pathType: Prefix
        backend:
          service:
            name: turkeyorch
            port: 
              number: 889
      - path: /turkey-return-center
        pathType: Prefix
        backend:
          service:
            name: turkeyorch
            port: 
              number: 889
---
apiVersion: v1
kind: Secret
metadata:
  name: regcred
  namespace: turkey-services
data:
  .dockerconfigjson: {{.REGCRED_b64}}
type: kubernetes.io/dockerconfigjson
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: turkeyorch
  namespace: turkey-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: turkeyorch
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: turkeyorch
    spec:
      serviceAccountName: orch-sa
      {{ if ne .Env "dev" }}
      nodeSelector:
        turkey: service
      {{ end }}
      volumes:
      - name: nfs
        nfs:
          server: {{.FilestoreIP}}
          path: /{{.FilestorePath}}
      containers:
      - name: turkeyorch
        image: mozilla/turkeyorch:{{.ItaChan}}-latest
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true    
        volumeMounts:
        - name: nfs
          mountPath: /turkeyfs
          mountPropagation: Bidirectional
        env:
        - name: REGION
          value: {{.Region}}
        - name: FilestoreIP
          value: {{.FilestoreIP}}
        - name: FilestorePath
          value: {{.FilestorePath}}
        - name: ENV
          value: {{.Env}}       
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NS
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_LABEL_APP
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        - name: DOMAIN
          value: {{.Domain}}
        - name: HUB_DOMAIN
          value: {{.HubDomain}}
        - name: DB_CONN
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_CONN
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_USER               
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_PASS
        - name: SMTP_SERVER
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_SERVER
        - name: SMTP_PORT
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_PORT
        - name: SMTP_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_USER
        - name: SMTP_PASS
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_PASS
        - name: PERMS_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: PERMS_KEY     
        - name: OAUTH_CLIENT_ID_FXA
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_ID_FXA
        - name: OAUTH_CLIENT_SECRET_FXA
          valueFrom:
            secretKeyRef:
              name: configs
              key: OAUTH_CLIENT_SECRET_FXA
        - name: AWS_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: AWS_KEY      
        - name: AWS_SECRET
          valueFrom:
            secretKeyRef:
              name: configs
              key: AWS_SECRET
        - name: GCP_SA_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: GCP_SA_KEY
        - name: CLOUD
          value: {{.CLOUD}}
        - name: GCP_SA_HMAC_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: GCP_SA_HMAC_KEY
        - name: GCP_SA_HMAC_SECRET
          valueFrom:
            secretKeyRef:
              name: configs
              key: GCP_SA_HMAC_SECRET        
        - name: DASHBOARD_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: DASHBOARD_ACCESS_KEY
        - name: SKETCHFAB_API_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: SKETCHFAB_API_KEY     
        - name: TENOR_API_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: TENOR_API_KEY
        - name: SENTRY_DSN_RET
          valueFrom:
            secretKeyRef:
              name: configs
              key: SENTRY_DSN_RET
        - name: SENTRY_DSN_HUBS
          valueFrom:
            secretKeyRef:
              name: configs
              key: SENTRY_DSN_HUBS
        - name: SENTRY_DSN_SPOKE
          valueFrom:
            secretKeyRef:
              name: configs
              key: SENTRY_DSN_SPOKE         
        livenessProbe:
          httpGet:
            path: "/_healthz"
            port: 889
            scheme: HTTPS
          initialDelaySeconds: 30
          timeoutSeconds: 1
          periodSeconds: 60
        resources:
          requests:
            cpu: 0.25
            memory: 0.5Gi
          limits:
            cpu: 1
            memory: 2Gi
      imagePullSecrets:
      - name: regcred      
---
apiVersion: v1
kind: Service
metadata:
  name: turkeyorch
  namespace: turkey-services
spec:
  ports:
  - name: http
    port: 888
    targetPort: 888
  - name: https
    port: 889
    targetPort: 889    
  selector:
    app: turkeyorch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orch-sa
  namespace: turkey-services
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: orch-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin  
subjects:
- kind: ServiceAccount
  name: orch-sa
  namespace: turkey-services
---
####################################################################################
################################### pgbouncer ######################################
####################################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: turkey-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgbouncer
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      {{ if ne .Env "dev" }}
      nodeSelector:
        turkey: service
      {{ end }}
      containers:
      - image: mozillareality/pgbouncer:{{.ItaChan}}-latest
        imagePullPolicy: IfNotPresent
        name: pgbouncer
        env:
        - name: MAX_CLIENT_CONN
          value: "10000"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_USER          
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_PASS
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_HOST          
        resources:
          requests:
            cpu: 0.25
            memory: 250Mi
          limits:
            cpu: 1
            memory: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
  namespace: turkey-services
spec:
  ports:
  - name: http
    port: 5432
    targetPort: 5432
  selector:
    app: pgbouncer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer-t
  namespace: turkey-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgbouncer-t
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: pgbouncer-t
    spec:
      {{ if ne .Env "dev" }}
      nodeSelector:
        turkey: service
      {{ end }}
      containers:
      - image: mozillareality/pgbouncer:{{.ItaChan}}-latest
        imagePullPolicy: IfNotPresent
        name: pgbouncer-t
        env:
        - name: MAX_CLIENT_CONN
          value: "10000"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_USER          
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_PASS
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_HOST   
        - name: POOL_MODE
          value: transaction
        resources:
          requests:
            cpu: 0.25
            memory: 250Mi
          limits:
            cpu: 1
            memory: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer-t
  namespace: turkey-services
spec:
  ports:
  - name: http
    port: 5432
    targetPort: 5432
  selector:
    app: pgbouncer-t
---
########################################################################
######################   ita   ###################################
########################################################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ita-turkeyservices-public
  namespace: turkey-services
  annotations:
    kubernetes.io/ingress.class: haproxy
spec:
  rules:
  - host: {{.Domain}}
    http:
      paths:
      - path: /z/meta/cluster-ips
        pathType: Prefix
        backend:
          service:
            name: ita
            port: 
              number: 6000
---
apiVersion: v1
kind: Service
metadata:
  name: ita
  namespace: turkey-services
spec:
  ports:
  - name: http
    port: 6000
    targetPort: 6000
  selector:
    app: ita
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ita
  namespace: turkey-services
  labels:
    CHANNEL: {{.ItaChan}}  
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ita
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: ita
        CHANNEL: stable
    spec:
      serviceAccountName: ita-sa
      {{ if ne .Env "dev" }}
      nodeSelector:
        turkey: service
      {{ end }}
      containers:
      - image: mozillareality/ita:{{.ItaChan}}-latest
        imagePullPolicy: Always
        name: ita
        env:
        - name: POD_NS
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_DEPLOYMENT_NAME
          value: ita
        - name: GCP_SA_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: GCP_SA_KEY
        resources:
          requests:
            cpu: 0.05
            memory: 50Mi
          limits:
            cpu: 0.1
            memory: 200Mi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ita-sa
  namespace: turkey-services
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ita-sa-turkey-services-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin #todo: further tighten this? worth the effort?
subjects:
- kind: ServiceAccount
  name: ita-sa
  namespace: turkey-services
---
###############################################################################
### grant all service accounts read access to configmaps in turkey-services ###
###############################################################################
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hubsbuilds-reader
  namespace: turkey-services
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs:
    - "get"
    - "watch"
    - "list"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hubsbuilds-reader-rb
  namespace: turkey-services
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hubsbuilds-reader
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts
---
####################################################################################
#################################### dashboard #####################################
####################################################################################  
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: turkeydashboard
  namespace: turkey-services
  annotations:
    kubernetes.io/ingress.class: haproxy
spec:
  rules:
  - host: dashboard-api.{{.Domain}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: turkeydashboard
            port: 
              number: 4000
  - host: dashboard.{{.Domain}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: turkeydashboard
            port: 
              number: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: turkeydashboard
  namespace: turkey-services
  labels:
    app: turkeydashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: turkeydashboard
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: turkeydashboard
    spec:
      imagePullSecrets:
      - name: regcred  
      # terminationGracePeriodSeconds: 3
      {{ if ne .Env "dev" }}
      nodeSelector:
        turkey: service
      {{ end }}
      containers:
      - name: turkeydashboard
        image: mozilla/turkeydashboard:{{.ItaChan}}-latest
        imagePullPolicy: IfNotPresent        
        env:
        - name: AUTH_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: AUTH_PUBLIC_KEY
        - name: turkeyDomain
          value: {{.Domain}}        
        - name: PHX_HOST
          value: dashboard.{{.Domain}}
        - name: PHX_SERVER
          value: string
        - name: RELEASE_NAME
          value: string
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: configs
              key: DASHBOARD_DATABASE_URL      #ecto://USER:PASS@HOST/DATABASE
        - name: SECRET_KEY_BASE
          valueFrom:
            secretKeyRef:
              name: configs
              key: DASHBOARD_SECRET_KEY_BASE
        - name: DASHBOARD_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: DASHBOARD_ACCESS_KEY
        - name: BASIC_AUTH_USERNAME
          value: dev
        - name: BASIC_AUTH_PASSWORD
          value: ducksducksducks
        - name: AUTH_SERVER
          value: auth.{{.Domain}}
        - name: FXA_SERVER
          value: {{.FXA_SERVER}}
        resources:
          requests:
            cpu: 0.25
            memory: 250Mi
          limits:
            cpu: 1
            memory: 2Gi
      - name: turkeydashboardclient
        image: mozilla/turkeydashboardclient:{{.ItaChan}}-latest
        imagePullPolicy: IfNotPresent        
        env:
        - name: dummy
          value: dummy
        resources:
          requests:
            cpu: 0.25
            memory: 250Mi
          limits:
            cpu: 1
            memory: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: turkeydashboard
  namespace: turkey-services
  labels:
    app: turkeydashboard
spec:
  type: ClusterIP
  selector:
    app: turkeydashboard
  ports:
  - name: http-client
    port: 3000
    targetPort: 3000
  - name: http
    port: 4000
    targetPort: 4000
# ---
# ####################################################################################
# ##################################### marketing ####################################
# ####################################################################################  
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: turkeymarketing
#   namespace: turkey-services
#   annotations:
#     kubernetes.io/ingress.class: haproxy
# spec:
#   rules:
#   - host: marketing.{{.Domain}}
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: turkeymarketing
#             port: 
#               number: 3000
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: turkeymarketing
#   namespace: turkey-services
#   labels:
#     app: turkeymarketing
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: turkeymarketing
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       labels:
#         app: turkeymarketing
#     spec:
#       # terminationGracePeriodSeconds: 3
#       {{ if ne .Env "dev" }}
#       nodeSelector:
#         turkey: service
#       {{ end }}
#       containers:
#       - name: turkeymarketing
#         image: mozillareality/turkeymarketing:{{.ItaChan}}-latest
#         imagePullPolicy: IfNotPresent        
#         env:
#         - name: dummy
#           value: dummy
#         resources:
#           requests:
#             cpu: 0.25
#             memory: 250Mi
#           limits:
#             cpu: 1
#             memory: 2Gi
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: turkeymarketing
#   namespace: turkey-services
#   labels:
#     app: turkeymarketing
# spec:
#   type: ClusterIP
#   selector:
#     app: turkeymarketing
#   ports:
#   - name: http-client
#     port: 3000
#     targetPort: 3000
####################################################################################
################################### has ############################################
####################################################################################
kind: Deployment
apiVersion: apps/v1
metadata:
  name: has
  namespace: turkey-services
spec:
  replicas: 2
  selector:
    matchLabels:
      app: has
  template:
    metadata:
      labels:
        app: has
    spec:
      {{ if ne .Env "dev" }}
      nodeSelector:
        turkey: service
      {{ end }}
      containers:
      - name: has
        image: mozillareality/has:{{.ItaChan}}
        ports:
        - containerPort: 9001
        resources:
          requests:
            memory: 500Mi
            cpu: 0.5   
          limits:
            memory: 800Mi
            cpu: 0.8
---
kind: Service
apiVersion: v1
metadata:
  name: has
  namespace: turkey-services
spec:
  ports:
    - name: http-client
      port: 9001
      targetPort: 9001
  selector:
    app: has