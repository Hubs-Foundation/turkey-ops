AWSTemplateFormatVersion: 2010-09-09

Parameters:
  mainStackName:
    Type: String    
  VPC:
    Type: String
  # PrivateSubnet1:
  #   Type: String
  # PrivateSubnet2:
  #   Type: String
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String    
  ExecutionRole:
    Type: String
  TaskRole:
    Type: String
  AutoScalingRole:
    Type: String           
  hpaMINcontainers:
    Type: Number
    Default: 1
  hpaMAXcontainers:
    Type: Number
    Default: 5
  hpaTargetValue:
    Type: Number
    Default: 65
  IMGret:  
    Type: String
    Default: docker.io/tanfarming/ret
  IMGdlg:
    Type: String
    Default: docker.io/tanfarming/dialog    
  HttpsCertArn:
    Type: String
  retConfigSsmArn:
    Type: String
  permsKeySsmArn:
    Type: String
    
Resources:  
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref mainStackName
  ContainerSGalb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref mainStackName, podSG, alb]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
  ContainerSGpub:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref mainStackName, podSG, alb]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref mainStackName, albSG]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"         
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"        
        - IpProtocol: tcp
          FromPort: 4443
          ToPort: 4443
          CidrIp: "0.0.0.0/0"   
        - IpProtocol: tcp
          FromPort: 7000
          ToPort: 7000
          CidrIp: "0.0.0.0/0"                         
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['-', [!Ref mainStackName, alb]]
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
      SecurityGroups:
        - !Ref ALBSecurityGroup
##############################################################
################# service: ret  ########################
##############################################################
  logGRPret:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Join ['-', [/ecs/, !Ref mainStackName, ret]]
  tskDEFret:
      Type: AWS::ECS::TaskDefinition
      DependsOn: logGRPret
      Properties:
        Family: !Join ['-', [!Ref mainStackName, ret]]
        NetworkMode: awsvpc
        RequiresCompatibilities:
            - FARGATE
        Cpu: 256
        Memory: 1GB
        ExecutionRoleArn: !Ref ExecutionRole
        TaskRoleArn: !Ref TaskRole
        ContainerDefinitions:
        - Name: ret
          Image: !Ref IMGret
          PortMappings:
            - ContainerPort: 4000
          Environment:
            - Name: paramsName
              Value: !Ref mainStackName
          Secrets:
            - Name: HAB_RETICULUM
              ValueFrom: !Ref retConfigSsmArn
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref logGRPret
              awslogs-stream-prefix: ecs
  SVCret:
      Type: AWS::ECS::Service
      DependsOn:
      - httpsLISTENERret
      Properties: 
        ServiceName: !Join ['-', [!Ref mainStackName, ret]]
        Cluster: !Ref Cluster
        TaskDefinition: !Ref tskDEFret
        DeploymentConfiguration:
          MinimumHealthyPercent: 100
          MaximumPercent: 200
        DesiredCount: 1
        HealthCheckGracePeriodSeconds: 60
        LaunchType: FARGATE
        NetworkConfiguration: 
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            SecurityGroups:
              - !Ref ContainerSGalb
        LoadBalancers:
          - ContainerName: ret
            ContainerPort: 4000
            TargetGroupArn: !Ref TGret
  httpLISTENERret:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: "HTTP"
  httpsLISTENERret:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref TGret
            Type: forward
        LoadBalancerArn: !Ref ALB
        Port: 443
        Protocol: HTTPS
        Certificates:
          - CertificateArn: !Ref HttpsCertArn
  TGret:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join ['-', [!Ref mainStackName, TGret]]
        Port: 4000
        Protocol: HTTPS
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 0
        TargetType: ip
        VpcId: !Ref VPC      
        HealthCheckProtocol : HTTPS
        HealthCheckPort : 4000
        HealthCheckPath: /api/v1/meta
        HealthCheckIntervalSeconds: 120
        UnhealthyThresholdCount: 2
        HealthyThresholdCount: 2        
        Matcher:
          HttpCode: 200,301,302,404
  hpaTGTret:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MinCapacity: !Ref hpaMINcontainers
        MaxCapacity: !Ref hpaMAXcontainers
        ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt SVCret.Name]]
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs
        RoleARN: !Ref AutoScalingRole
  hpaPOLICYret:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: !Join ['-', [!Ref mainStackName, hpa-cpu-ret]]
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref hpaTGTret
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ECSServiceAverageCPUUtilization
          ScaleInCooldown: 600
          ScaleOutCooldown: 60
          TargetValue: !Ref hpaTargetValue 
##############################################################
################# service: dlg  ########################
##############################################################
  logGRPdlg:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Join ['-', [/ecs/, !Ref mainStackName, dlg]]
  tskDEFdlg:
      Type: AWS::ECS::TaskDefinition
      DependsOn: logGRPdlg
      Properties:
        Family: !Join ['-', [!Ref mainStackName, dlg]]
        NetworkMode: awsvpc
        RequiresCompatibilities:
            - FARGATE
        Cpu: 256
        Memory: 1GB
        ExecutionRoleArn: !Ref ExecutionRole
        TaskRoleArn: !Ref TaskRole
        ContainerDefinitions:
        - Name: dlg
          Image: !Ref IMGdlg
          PortMappings:
            - ContainerPort: 4443
            - ContainerPort: 7000
          Environment:
            - Name: paramsName
              Value: !Ref mainStackName
          Secrets:
            - Name: perms_key
              ValueFrom: !Ref permsKeySsmArn
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref logGRPdlg
              awslogs-stream-prefix: ecs              
  SVCdlg:
      Type: AWS::ECS::Service
      DependsOn:
      - httpsLISTENERdlg
      Properties: 
        ServiceName: !Join ['-', [!Ref mainStackName, dlg]]
        Cluster: !Ref Cluster
        TaskDefinition: !Ref tskDEFdlg
        DeploymentConfiguration:
          MinimumHealthyPercent: 100
          MaximumPercent: 200
        DesiredCount: 1
        HealthCheckGracePeriodSeconds: 60
        LaunchType: FARGATE
        NetworkConfiguration: 
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            SecurityGroups:
              - !Ref ContainerSGpub
        LoadBalancers:
          - ContainerName: dlg
            ContainerPort: 4443
            TargetGroupArn: !Ref TGdlg
          - ContainerName: dlg
            ContainerPort: 7000
            TargetGroupArn: !Ref TGdlgAdm
  httpsLISTENERdlg:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref TGdlg
            Type: forward
        LoadBalancerArn: !Ref ALB
        Port: 4443
        Protocol: HTTPS
        Certificates:
          - CertificateArn: !Ref HttpsCertArn
  TGdlg:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join ['-', [!Ref mainStackName, TGdlg]]
        Port: 4443
        Protocol: HTTPS
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 0
        TargetType: ip
        VpcId: !Ref VPC      
        HealthCheckProtocol : HTTPS
        HealthCheckPort : 4443
        HealthCheckPath: /
        HealthCheckIntervalSeconds: 120
        UnhealthyThresholdCount: 2
        HealthyThresholdCount: 2        
        Matcher:
          HttpCode: 200,301,302,404
  httpsLISTENERdlgAdm:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref TGdlgAdm
            Type: forward
        LoadBalancerArn: !Ref ALB
        Port: 7000
        Protocol: HTTPS
        Certificates:
          - CertificateArn: !Ref HttpsCertArn      
  TGdlgAdm:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join ['-', [!Ref mainStackName, TGdlgAdm]]
        Port: 7000
        Protocol: HTTPS
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 0
        TargetType: ip
        VpcId: !Ref VPC      
        HealthCheckProtocol : HTTPS
        HealthCheckPort : 4443
        HealthCheckPath: /
        HealthCheckIntervalSeconds: 120
        UnhealthyThresholdCount: 2
        HealthyThresholdCount: 2        
        Matcher:
          HttpCode: 200,301,302,404

  hpaTGTdlg:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MinCapacity: !Ref hpaMINcontainers
        MaxCapacity: !Ref hpaMAXcontainers
        ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt SVCdlg.Name]]
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs
        RoleARN: !Ref AutoScalingRole
  hpaPOLICYdlg:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: !Join ['-', [!Ref mainStackName, hpa-cpu-dlg]]
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref hpaTGTdlg
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ECSServiceAverageCPUUtilization
          ScaleInCooldown: 600
          ScaleOutCooldown: 60
          TargetValue: !Ref hpaTargetValue 


Outputs:
  albDNSname:
    Description: albDNSname
    Value: !GetAtt ALB.DNSName